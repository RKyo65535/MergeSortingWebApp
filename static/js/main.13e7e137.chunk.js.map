{"version":3,"sources":["components/AddItemButton.tsx","components/InputZone.tsx","components/GotoSortButton.tsx","components/MergeSortSelect.tsx","feature/mergeSort/mergeSort.ts","components/ResultText.tsx","App.tsx","sandbox/message.ts","index.tsx"],"names":["AddItemButton","props","type","className","onClick","pushEvent","InputZone","id","autoComplete","placeholder","onChange","event","manageItem","name","target","value","deleteMyself","GotoSortButton","MergeSortSelect","leftAction","leftItem","rightAction","rightItem","mergeSort","state","action","m_mergedItemList","mergedItemList","m_tempItemList","tempItemList","m_currentLeft","currentLeft","m_currentRight","currentRight","m_currentLeftEndPoint","currentLeftEndPoint","m_currentRightEndPoint","currentRightEndPoint","m_currentMergeCount","currentMergeCount","length","padAllRight","updateSortPoint","padAllLeft","initialize","returnParam","updateAction","Math","pow","ResultText","ranking","itemName","App","console","group","warn","log","groupEnd","useState","phase","setPhase","currentItemList","setCurrentItemList","initialState","useReducer","mergeState","dispatchMergeState","deleteItem","key","remainingItems","filter","item","chackMergeCondition","list","itemLength","currentShowItemList","map","mergeSortZone","resultZone","sortResult","i","oneResult","nanoid","newItem","changeState","tempList","initMergeSort","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13e7e137.chunk.js","sourcesContent":["type Props = {\n  pushEvent: () => void;\n};\n\nexport function AddItemButton(props: Props) {\n  return (\n    <button type=\"button\" className=\"add-item-button\" onClick={props.pushEvent}>\n      <span>追加</span>\n    </button>\n  );\n}\n","import { ChangeEvent } from \"react\";\nimport { ToMergeItem } from \"../feature/toMergeItem\";\n\ntype Props = {\n  id: string;\n  key: string;\n  manageItem: ToMergeItem;\n  deleteMyself: (key: string) => void;\n};\n\nexport function InputZone(props: Props) {\n  //フォームに入力されたときの関数。\n  function hundleEdit(event: ChangeEvent<HTMLInputElement>) {\n    //console.log(event.target.value);\n    props.manageItem.name = event.target.value;\n  }\n\n  return (\n    <li>\n      <input\n        id={props.id}\n        type=\"text\"\n        className=\"name-input-button\"\n        autoComplete=\"on\"\n        placeholder=\"概念を入力\"\n        onChange={hundleEdit}\n      ></input>\n      <button\n        type=\"button\"\n        className=\"name-delete-button\"\n        onClick={() => props.deleteMyself(props.id)}\n      >\n        <span>削除</span>\n      </button>\n    </li>\n  );\n}\n","type Props = {\n  pushEvent: () => void;\n};\n\nexport function GotoSortButton(props: Props) {\n  return (\n    <button type=\"button\" className=\"add-item-button\" onClick={props.pushEvent}>\n      <span>ソートする！</span>\n    </button>\n  );\n}\n","import { ToMergeItem } from \"../feature/toMergeItem\";\n\ntype Props = {\n  leftItem: ToMergeItem;\n  rightItem: ToMergeItem;\n  leftAction: () => void;\n  rightAction: () => void;\n};\n\n//ここにマージソートの選択する部分がある。\nexport function MergeSortSelect(props: Props) {\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"left-select-button\"\n        onClick={() => props.leftAction()}\n      >\n        <span>{props.leftItem.name} が良い</span>\n      </button>\n      <button\n        type=\"button\"\n        className=\"right-select-button\"\n        onClick={() => props.rightAction()}\n      >\n        <span>{props.rightItem.name} が良い</span>\n      </button>\n    </>\n  );\n}\n","import { ToMergeItem } from \"../toMergeItem\";\nimport { MergeSortAction } from \"./mergeSortAction\";\nimport { MergeSortParameter } from \"./mergeSortPrameter\";\n\n//リデュース用？\n//ここにマージソートのアルゴリズムを書き込もう\nexport function mergeSort(\n  state: MergeSortParameter,\n  action: MergeSortAction\n): MergeSortParameter {\n  //最終的に代入する奴ら\n  let m_mergedItemList: ToMergeItem[] = [...state.mergedItemList];\n  let m_tempItemList: ToMergeItem[] = [...state.tempItemList];\n  let m_currentLeft: number = state.currentLeft;\n  let m_currentRight: number = state.currentRight;\n  let m_currentLeftEndPoint: number = state.currentLeftEndPoint;\n  let m_currentRightEndPoint: number = state.currentRightEndPoint;\n  let m_currentMergeCount: number = state.currentMergeCount;\n\n  switch (action.type) {\n    case \"LeftNext\": //左の選択がされたとき\n      selectLeft();\n      break;\n    case \"RightNext\": //右の選択がされたとき\n      selectRight();\n      break;\n    case \"Create\":\n      return action.initialize;\n    default:\n      break;\n  }\n\n  let returnParam: MergeSortParameter = {\n    mergedItemList: m_mergedItemList,\n    tempItemList: m_tempItemList,\n    currentLeft: m_currentLeft,\n    currentRight: m_currentRight,\n    currentLeftEndPoint: m_currentLeftEndPoint,\n    currentRightEndPoint: m_currentRightEndPoint,\n    currentMergeCount: m_currentMergeCount,\n  };\n\n  //console.log(returnParam);\n  //更新を掛ける\n  action.updateAction(\n    m_mergedItemList,\n    m_mergedItemList.length,\n    m_currentMergeCount\n  );\n\n  return returnParam;\n\n  function selectLeft() {\n    //console.log(\"左を選択\");\n    //えらばれしものを配列に入れる。\n    m_tempItemList = [...m_tempItemList, m_mergedItemList[m_currentLeft]];\n    //console.log(m_tempItemList);\n\n    //次の候補に移動\n    m_currentLeft += 1;\n\n    //限界になってしまったら、残った右の奴を順に配列に入れていく。\n    //その後、すべてのパラメータを更新する。\n    if (\n      m_currentLeft > m_currentLeftEndPoint ||\n      m_currentLeft >= m_mergedItemList.length\n    ) {\n      padAllRight();\n      updateSortPoint();\n    }\n  }\n\n  function selectRight() {\n    //console.log(\"右を選択\");\n    //えらばれしものを配列に入れる。\n    m_tempItemList = [...m_tempItemList, m_mergedItemList[m_currentRight]];\n    //次の候補に移動\n    m_currentRight += 1;\n\n    //限界になってしまったら、残った左の奴を順に配列に入れていく。\n    //その後、すべてのパラメータを更新する。\n    if (\n      m_currentRight > m_currentRightEndPoint ||\n      m_currentRight >= m_mergedItemList.length\n    ) {\n      padAllLeft();\n      updateSortPoint();\n    }\n  }\n\n  //左のものをすべて一時配列に詰める\n  function padAllLeft() {\n    //console.log(\"右全滅\");\n    while (\n      m_currentLeft <= m_currentLeftEndPoint &&\n      m_currentLeft < m_mergedItemList.length\n    ) {\n      m_tempItemList = [...m_tempItemList, m_mergedItemList[m_currentLeft]];\n      m_currentLeft += 1;\n    }\n  }\n  //右のものをすべて一時配列に詰める\n  function padAllRight() {\n    //console.log(\"左全滅\");\n    while (\n      m_currentRight <= m_currentRightEndPoint &&\n      m_currentRight < m_mergedItemList.length\n    ) {\n      m_tempItemList = [...m_tempItemList, m_mergedItemList[m_currentRight]];\n      m_currentRight += 1;\n    }\n  }\n\n  //次のソートポイントを確認する。\n  function updateSortPoint() {\n    //console.log(\"次の地点の確認\");\n    //次の左右の終着点\n    m_currentLeftEndPoint =\n      m_currentLeftEndPoint + Math.pow(2, m_currentMergeCount + 1);\n    m_currentRightEndPoint =\n      m_currentRightEndPoint + Math.pow(2, m_currentMergeCount + 1);\n\n    //次の左右の始点\n    m_currentLeft =\n      m_currentLeftEndPoint - Math.pow(2, m_currentMergeCount) + 1;\n    m_currentRight =\n      m_currentRightEndPoint - Math.pow(2, m_currentMergeCount) + 1;\n\n    //以下、例外条件を潰していく。\n    if (m_currentRight >= m_mergedItemList.length) {\n      //console.log(\"時点の右始点は配列外\" + m_currentRight);\n      //右の始点がそもそも配列外の時は、もう自動的に左の物を配列に入れてあげる。(左がない場合もある。)\n      padAllLeft();\n      //ここで1段階目のマージが完了\n      //マージ回数を増やし、その回数目での初期位置にする。\n      m_currentMergeCount = m_currentMergeCount + 1;\n      m_currentLeftEndPoint = Math.pow(2, m_currentMergeCount) - 1;\n      m_currentRightEndPoint = Math.pow(2, m_currentMergeCount + 1) - 1;\n      m_currentLeft =\n        m_currentLeftEndPoint - (Math.pow(2, m_currentMergeCount) - 1); //つまり0です。\n      m_currentRight =\n        m_currentRightEndPoint - (Math.pow(2, m_currentMergeCount) - 1); //つまり2^currentMergeCountです。\n      //さらに、マージしたリストを更新する\n      m_mergedItemList = [...m_tempItemList];\n      //一時リストは空にする。\n      m_tempItemList = [];\n    }\n  }\n}\n","type Props = {\n  ranking: number;\n  itemName: string;\n};\n\nexport function ResultText(props: Props) {\n  return (\n    <p>\n      {props.ranking}番目に好きなのは{props.itemName}です。\n    </p>\n  );\n}\n","import { useReducer, useState } from \"react\";\nimport { AddItemButton } from \"./components/AddItemButton\";\nimport { InputZone } from \"./components/InputZone\";\nimport { ToMergeItem } from \"./feature/toMergeItem\";\nimport { nanoid } from \"nanoid\";\nimport { ViewPhase } from \"./feature/viewPhase\";\nimport { GotoSortButton } from \"./components/GotoSortButton\";\nimport { MergeSortSelect } from \"./components/MergeSortSelect\";\nimport { mergeSort } from \"./feature/mergeSort/mergeSort\";\nimport { MergeSortParameter } from \"./feature/mergeSort/mergeSortPrameter\";\nimport { MergeSortAction } from \"./feature/mergeSort/mergeSortAction\";\nimport { ResultText } from \"./components/ResultText\";\nimport { message } from \"./sandbox/message\";\n\nexport function App() {\n  //最初に遊びごごろを\n  message();\n\n  //ここで全体を管理します。\n\n  //現在のフェーズ(状態)\n  const [phase, setPhase] = useState<ViewPhase>(\"Set\");\n\n  //現在のリスト\n  const [currentItemList, setCurrentItemList] = useState<ToMergeItem[]>([]);\n\n  //マージソートの最初の状態？\n  const initialState: MergeSortParameter = {\n    mergedItemList: [],\n    tempItemList: [],\n    currentLeft: 0,\n    currentRight: 0,\n    currentLeftEndPoint: 0,\n    currentRightEndPoint: 0,\n    currentMergeCount: 0,\n  };\n\n  //これを通じてマージソートの状態を扱う\n  const [mergeState, dispatchMergeState] = useReducer(mergeSort, initialState);\n\n  //アイテム追加用の関数。\n  function addItem() {\n    const newItem: ToMergeItem = {\n      id: \"id\" + nanoid(),\n      name: \"\",\n    };\n    setCurrentItemList([...currentItemList, newItem]);\n  }\n\n  function deleteItem(key: string) {\n    //自身以外をリストに残す形で、自信を滅する\n    const remainingItems = currentItemList.filter((item) => key !== item.id);\n    setCurrentItemList(remainingItems);\n  }\n\n  //現在の表示状態を変更する\n  function changeState(phase: ViewPhase) {\n    setPhase(phase);\n  }\n\n  //マージソート開始のお知らせ\n  function startMergeSort() {\n    changeState(\"Sort\");\n    initMergeSort();\n  }\n\n  //マージソート情報の初期化\n  function initMergeSort() {\n    const tempList: ToMergeItem[] = [...currentItemList];\n    const mergeAction: MergeSortAction = {\n      type: \"Create\",\n      initialize: {\n        //とりあえず複数の段階でマージ完了したリスト\n        mergedItemList: tempList,\n        //マージ途中のリスト\n        tempItemList: [],\n        //マージする幅の左右の着目点\n        currentLeft: 0,\n        currentRight: 1,\n        //マージする左右の終着点\n        currentLeftEndPoint: 0,\n        currentRightEndPoint: 1,\n        //2^これ 個のブロックを処理するという変数\n        currentMergeCount: 0,\n      },\n      updateAction: chackMergeCondition,\n    };\n    dispatchMergeState(mergeAction);\n  }\n\n  //マージソートで左を選択\n  function selectLeft() {\n    const mergeAction: MergeSortAction = {\n      type: \"LeftNext\",\n      initialize: initialState,\n      updateAction: chackMergeCondition,\n    };\n    dispatchMergeState(mergeAction);\n  }\n\n  //マージソートで右を選択。\n  function selectRight() {\n    const mergeAction: MergeSortAction = {\n      type: \"RightNext\",\n      initialize: initialState,\n      updateAction: chackMergeCondition,\n    };\n    dispatchMergeState(mergeAction);\n  }\n\n  //マージの状態によって、現在の状態を変化させる\n  function chackMergeCondition(\n    list: ToMergeItem[],\n    itemLength: number,\n    currentMergeCount: number\n  ) {\n    //ソートの必要が無くなったらこれを実行\n    if (itemLength <= Math.pow(2, currentMergeCount)) {\n      //console.log(\"モード変更！\");\n      setPhase(\"Result\");\n    }\n    //現在のリストに反映\n    setCurrentItemList([...list]);\n  }\n\n  //現在のリストを、良い感じに実態(View?)に渡してやる\n  //入力フォームを複製できるのだ\n  let currentShowItemList: JSX.Element[] = [];\n  if (phase === \"Set\") {\n    currentShowItemList = currentItemList.map((item) => (\n      <InputZone\n        id={item.id}\n        key={item.id}\n        manageItem={item}\n        deleteMyself={deleteItem}\n      />\n    ));\n  }\n\n  let mergeSortZone: JSX.Element = <></>;\n  if (phase === \"Sort\") {\n    mergeSortZone = (\n      <MergeSortSelect\n        leftItem={currentItemList[mergeState.currentLeft]}\n        rightItem={currentItemList[mergeState.currentRight]}\n        leftAction={selectLeft}\n        rightAction={selectRight}\n      />\n    );\n  }\n\n  let resultZone: JSX.Element = <></>;\n  let sortResult: JSX.Element[] = [];\n  if (phase === \"Result\") {\n    resultZone = <>マージ完了</>;\n\n    for (let i = 0; i < currentItemList.length; i++) {\n      let oneResult: JSX.Element = (\n        <ResultText\n          ranking={i + 1}\n          itemName={currentItemList[i].name}\n          key={nanoid()}\n        />\n      );\n      sortResult = [...sortResult, oneResult];\n    }\n  }\n\n  //ここから下がメイン部分\n  return (\n    <div className=\"margeAll\">\n      <h1>マージソートアプリ</h1>\n\n      {currentShowItemList}\n      <AddItemButton pushEvent={addItem} />\n      <GotoSortButton pushEvent={startMergeSort} />\n\n      {mergeSortZone}\n      {resultZone}\n      {sortResult}\n    </div>\n  );\n}\n","export function message() {\n  // 最初にコメントを入れよう！！\n  console.group(\"開発者メッセージ\");\n  const style1 = `font-size: 24px;\n  font-family: serif;\n  font-weight: bold;\n   color: #6e0202;\n   background: #db722c;\n   margin: 20px;\n   line-height: 2;`;\n  const style2 = `font-size: 14px;\n   font-family: serif;\n   font-weight: bold;\n    color: #F3A696;\n   background: #520d2e;`;\n  const style3 = `font-size: 16px;\n   font-family: serif;\n    color: #d4fff5;\n   background: #0d3d52;`;\n  console.warn(\"はずかしいやん\");\n  console.log(\"%cゆっくりマージソートしていってね！\", style1);\n\n  console.log(\n    \"%cそれは儚きあなたの思いを無残にも具現化してしまうアルゴリズム……\",\n    style2\n  );\n  console.log(\n    \"%c                    そして貴方はgithubへと誘われる……                    \\nhttps://github.com/RKyo65535/MergeSortingWebApp\",\n    style3\n  );\n  console.groupEnd();\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\n//rootタグのついた場所にReactでつくったものを入れるのだ\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}